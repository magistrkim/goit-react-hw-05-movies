{"version":3,"file":"static/js/982.ebf5e379.chunk.js","mappings":"2LACA,EAAuB,0BAAvB,EAAwD,0BAAxD,EAAyF,0BAAzF,EAAyH,yBAAzH,EAA6J,8B,SCgC7J,EA7BmB,SAAC,GAAc,IAAZA,EAAW,EAAXA,KACdC,GAAWC,EAAAA,EAAAA,MACjB,OACE,eAAIC,UAAWC,EAAf,SACGJ,EAAKK,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,WAAYC,EAAnB,EAAmBA,IAAnB,OACR,eAAaL,UAAWC,EAAxB,UACE,UAAC,KAAD,CACEK,GAAE,kBAAaH,GACfI,MAAO,CAAEC,KAAMV,GACfE,UAAWC,EAHb,WAKE,gBAAKI,IAAKA,EAAKI,IAAKL,EAAYJ,UAAWC,KAC3C,eAAID,UAAWC,EAAf,SAA8BG,QAPzBD,EADD,KAcf,C,mHCrBD,GAAgB,WAAa,+BAA+B,YAAc,gCAAgC,cAAgB,kCAAkC,kBAAoB,uC,SCI1KO,EAAY,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACnB,GAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAAuBC,EAAAA,EAAAA,MAAhBC,GAAP,gBACAC,EAAAA,EAAAA,YAAU,WAAO,IAAD,EACRC,EAAW,UAAGF,EAAaG,IAAI,gBAApB,QAAgC,GAEjDL,EAASI,EACV,GAAE,CAACF,IAWJ,OACE,gBAAKhB,UAAWC,EAAAA,UAAhB,UACE,kBAAMD,UAAWC,EAAAA,WAAgBU,SARhB,SAAAS,GACnBA,EAAMC,iBACNV,EAASS,GACTN,EAAS,GACV,EAIG,WACE,mBAAQQ,KAAK,SAAStB,UAAWC,EAAAA,YAAjC,UACE,iBAAMD,UAAWC,EAAAA,cAAjB,SAAoC,cAEtC,kBACEsB,SAhBa,SAAAH,GACnBN,EAASM,EAAMI,OAAOC,MACvB,EAeOA,MAAOZ,EACPa,KAAK,SACL1B,UAAWC,EAAAA,kBACXqB,KAAK,OACLK,aAAa,MACbC,WAAS,EACTC,YAAY,aACZC,UAAQ,QAKjB,EAMD,GAAeC,EAAAA,EAAAA,MAAKrB,G,kBChDpB,EAA0B,6BAA1B,EAA+D,2BCyD/D,EAjDmB,WAAO,IAAD,EACvB,GAA4BE,EAAAA,EAAAA,UAAS,MAArC,eAAOoB,EAAP,KAAeC,EAAf,KACA,GAA8BrB,EAAAA,EAAAA,WAAS,GAAvC,eAAOsB,EAAP,KAAgBC,EAAhB,KACA,GAAwCpB,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBoB,EAArB,KAEMlB,EAAW,UAAGF,EAAaG,IAAI,gBAApB,QAAgC,IAEjDF,EAAAA,EAAAA,YAAU,WACHC,GAILiB,GAAW,IAEXE,EAAAA,EAAAA,IAAenB,GACZoB,MAAK,SAAAzC,GAAI,OAAIoC,EAAUpC,EAAd,IACT0C,OAAM,kBACLC,EAAAA,OAAAA,QAAe,sDADV,IAGNC,SAAQ,kBAAMN,GAAW,EAAjB,KAVTF,EAAU,KAWb,GAAE,CAACf,IAeJ,OACE,iBAAKlB,UAAWC,EAAhB,WACE,SAAC,EAAD,CAAWU,SAfM,SAAAS,GACnBA,EAAMC,iBAEN,IAAMqB,EAAatB,EAAMI,OAAOmB,SAASC,OAAOnB,MAAMoB,OAAOC,cAE1C,KAAfJ,EAKJN,EAAgB,CAAEvB,MAAO6B,IAJvBF,EAAAA,OAAAA,KAAY,6BAKf,IAKIN,IAAW,SAACa,EAAA,EAAD,IACXf,IAAU,SAACgB,EAAA,EAAD,CAAYnD,KAAMmC,IACT,KAAb,OAANA,QAAM,IAANA,OAAA,EAAAA,EAAQiB,UACP,eAAGjD,UAAWC,EAAd,UAAyB,8CACqBiB,EAAY,SAKjE,C,sLCtDKgC,E,OAAWC,EAAAA,OAAa,CAC5BC,QAAS,+BACTC,OAAQ,CACNC,QAAS,mCACTC,SAAU,QACVC,eAAe,EACfC,KAAM,GAERC,QAAS,CACPC,OAAQ,sBAICC,EAAiB,mCAAG,8FAClB,sBADkB,SAERV,EAAS/B,IADnB,uBADkB,uBAEvBtB,EAFuB,EAEvBA,KAEFgE,EAAahE,EAAKiE,QAAQ5D,KAAI,YAAiC,IAA9BC,EAA6B,EAA7BA,GAAI4D,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,YAOhD,MAAO,CAAE7D,GAAAA,EAAIC,WALX2D,EAAMd,OAAS,GAAf,UAAuBc,EAAME,UAAU,EAAG,IAA1C,OAAqDF,EAK9B1D,IAJb2D,EAAW,0CACgBA,GACnC,wDAGL,IAZ8B,kBAcxBH,GAdwB,2CAAH,qDAiBjBxB,EAAc,mCAAG,WAAMxB,GAAN,iFACf,gBADe,SAELqC,EAAS/B,IADnB,gBAC6B,CACxCkC,OAAQ,CAAExC,MAAOA,KAHS,uBAEpBhB,EAFoB,EAEpBA,KAGFgE,EAAahE,EAAKiE,QAAQ5D,KAAI,YAAuC,IAApCC,EAAmC,EAAnCA,GAAIuB,EAA+B,EAA/BA,KAAMqC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,YAClD5D,EAAa2D,GAASrC,EAO1B,OANItB,EAAW6C,OAAS,KACtB7C,EAAaA,EAAW6D,UAAU,EAAG,IAAM,OAKtC,CAAE9D,GAAAA,EAAIC,WAAAA,EAAYC,IAHf2D,EAAW,0CACkBA,GACnC,wDAEL,IAd2B,kBAerBH,GAfqB,2CAAH,sDAkBdK,EAAgB,mCAAG,WAAMC,GAAN,gGACxBC,EADwB,iBACPD,GADO,SAEPjB,EAAS/B,IAAIiD,GAFN,uBAEtBvE,EAFsB,EAEtBA,KAEAwE,EACNxE,EADMwE,OAAQN,EACdlE,EADckE,MAAOC,EACrBnE,EADqBmE,YAAaM,EAClCzE,EADkCyE,aAAcC,EAChD1E,EADgD0E,aAAcC,EAC9D3E,EAD8D2E,SAG1DC,EAAaT,EAAW,0CACSA,GACnC,sCAT0B,kBAWvB,CACL7D,GAAIgE,EACJJ,MAAAA,EACAU,WAAAA,EACAC,YAAaJ,EAAaK,OAAO,EAAG,GACpCC,YAAY,GAAD,QAAqB,GAAfL,GAAmBM,QAAQ,GAAjC,KACXL,SAAAA,EACAH,OAAQA,EAAOpB,OACXoB,EAAOnE,KAAI,SAAA4E,GAAI,OAAIA,EAAKpD,IAAT,IAAeqD,KAAK,MACnC,2BApBwB,2CAAH,sDAwBhBC,EAAY,mCAAG,WAAMb,GAAN,oFACpBC,EADoB,iBACHD,EADG,qBAEHjB,EAAS/B,IAAIiD,GAFV,uBAElBvE,EAFkB,EAElBA,KACFoF,EAAOpF,EAAKoF,KAAK/E,KAAI,YAA4C,IAAzCwB,EAAwC,EAAxCA,KAAMwD,EAAkC,EAAlCA,UAAW/E,EAAuB,EAAvBA,GAAIgF,EAAmB,EAAnBA,aAIjD,MAAO,CACLzD,KAAAA,EACAwD,UAAAA,EACA/E,GAAAA,EACAE,IAPU8E,EAAY,0CACeA,GACnC,sCAOL,IAbyB,kBAcnBF,GAdmB,2CAAH,sDAiBZG,EAAe,mCAAG,WAAMjB,GAAN,oFACvBC,EADuB,iBACND,EADM,qBAENjB,EAAS/B,IAAIiD,GAFP,uBAErBvE,EAFqB,EAErBA,KACFwF,EAAUxF,EAAKiE,QAAQ5D,KAAI,kBAA8B,CAC7DoF,OAD+B,EAAGA,OAElCnF,GAF+B,EAAWA,GAG1CoF,QAH+B,EAAeA,QAAf,IAHJ,kBAStBF,GATsB,2CAAH,qD","sources":["webpack://react-homework-template/./src/components/MoviesList/movies-list.module.css?3466","components/MoviesList/MoviesList.jsx","webpack://react-homework-template/./src/components/Searchbar/search-bar.module.css?781a","components/Searchbar/Searchbar.jsx","webpack://react-homework-template/./src/pages/MoviesPage/movies-page.module.css?9b57","pages/MoviesPage/MoviesPage.jsx","shared/movies-api.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"list\":\"movies-list_list__QsEHr\",\"item\":\"movies-list_item__by-6a\",\"link\":\"movies-list_link__nBtgH\",\"img\":\"movies-list_img__AahWT\",\"subtitle\":\"movies-list_subtitle__hyAOE\"};","import PropTypes from 'prop-types';\nimport { Link, useLocation } from 'react-router-dom';\nimport css from './movies-list.module.css';\n\nconst MoviesList = ({ data }) => {\n  const location = useLocation();\n  return (\n    <ul className={css.list}>\n      {data.map(({ id, movieTitle, src }) => (\n        <li key={id} className={css.item}>\n          <Link\n            to={`/movies/${id}`}\n            state={{ from: location }}\n            className={css.link}\n          >\n            <img src={src} alt={movieTitle} className={css.img} />\n            <h3 className={css.subtitle}>{movieTitle}</h3>\n          </Link>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nMoviesList.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      movieTitle: PropTypes.string.isRequired,\n      src: PropTypes.string.isRequired,\n    }).isRequired\n  ).isRequired,\n};\nexport default MoviesList;\n","// extracted by mini-css-extract-plugin\nexport default {\"searchForm\":\"search-bar_searchForm__W5Pkd\",\"search__btn\":\"search-bar_search__btn__BGy9t\",\"search__label\":\"search-bar_search__label__d9xZT\",\"searchForm__input\":\"search-bar_searchForm__input__XCBwt\"};","import { useState, useEffect, memo } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport css from './search-bar.module.css';\n\nconst Searchbar = ({ onSubmit }) => {\n  const [query, setQuery] = useState('');\n  const [searchParams] = useSearchParams();\n  useEffect(() => {\n    const searchValue = searchParams.get('query') ?? '';\n\n    setQuery(searchValue);\n  }, [searchParams]);\n\n  const handleChange = event => {\n    setQuery(event.target.value);\n  };\n  const handleSubmit = event => {\n    event.preventDefault();\n    onSubmit(event);\n    setQuery('');\n  };\n\n  return (\n    <div className={css.searchbar}>\n      <form className={css.searchForm} onSubmit={handleSubmit}>\n        <button type=\"submit\" className={css.search__btn}>\n          <span className={css.search__label}>Search</span>\n        </button>\n        <input\n          onChange={handleChange}\n          value={query}\n          name=\"search\"\n          className={css.searchForm__input}\n          type=\"text\"\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Movie name\"\n          required\n        />\n      </form>\n    </div>\n  );\n};\n\nSearchbar.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n\nexport default memo(Searchbar);\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"movies-page_wrapper__ez9yg\",\"title\":\"movies-page_title__hgTGf\"};","import { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport { getMovieByName } from 'shared/movies-api';\nimport Searchbar from 'components/Searchbar/Searchbar';\nimport Loader from 'components/Loader/Loader';\nimport MoviesList from 'components/MoviesList/MoviesList';\nimport css from './movies-page.module.css';\n\nconst MoviesPage = () => {\n  const [movies, setMovies] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const searchValue = searchParams.get('query') ?? '';\n\n  useEffect(() => {\n    if (!searchValue) {\n      setMovies(null);\n      return;\n    }\n    setLoading(true);\n\n    getMovieByName(searchValue)\n      .then(data => setMovies(data))\n      .catch(() =>\n        Notify.failure('Oops! Something went wrong, please try again later.')\n      )\n      .finally(() => setLoading(false));\n  }, [searchValue]);\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    const inputValue = event.target.elements.search.value.trim().toLowerCase();\n\n    if (inputValue === '') {\n      Notify.warn('Please, enter movie title.');\n      return;\n    }\n\n    setSearchParams({ query: inputValue });\n  };\n\n  return (\n    <div className={css.wrapper}>\n      <Searchbar onSubmit={handleSubmit} />\n      {loading && <Loader />}\n      {movies && <MoviesList data={movies} />}\n      {movies?.length === 0 && (\n        <p className={css.title}>\n          There is no movies matching your request: \"{searchValue}\"\n        </p>\n      )}\n    </div>\n  );\n};\n\nexport default MoviesPage;\n","import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  params: {\n    api_key: '248116f5568d54feca6593c74cdd2b90',\n    language: 'en-US',\n    include_adult: false,\n    page: 1,\n  },\n  headers: {\n    accept: 'application/json',\n  },\n});\n\nexport const getTrendingMovies = async () => {\n  const path = '/trending/movie/day';\n  const { data } = await instance.get(path);\n\n  const moviesList = data.results.map(({ id, title, poster_path }) => {\n    const movieTitle =\n      title.length > 25 ? `${title.substring(0, 22)}...` : title;\n    const src = poster_path\n      ? `https://image.tmdb.org/t/p/w500/${poster_path}`\n      : 'https://via.placeholder.com/200x300.png?text=No+Image';\n\n    return { id, movieTitle, src };\n  });\n\n  return moviesList;\n};\n\nexport const getMovieByName = async query => {\n  const path = '/search/movie';\n  const { data } = await instance.get(path, {\n    params: { query: query },\n  });\n  const moviesList = data.results.map(({ id, name, title, poster_path }) => {\n    let movieTitle = title || name;\n    if (movieTitle.length > 25) {\n      movieTitle = movieTitle.substring(0, 22) + '...';\n    }\n    let src = poster_path\n      ? `https://image.tmdb.org/t/p/w500/${poster_path}`\n      : 'https://via.placeholder.com/200x300.png?text=No+Image';\n    return { id, movieTitle, src };\n  });\n  return moviesList;\n};\n\nexport const getMovieInfoById = async movieId => {\n  const path = `/movie/${movieId}`;\n  const { data } = await instance.get(path);\n\n  const { genres, title, poster_path, release_date, vote_average, overview } =\n    data;\n\n  const posterPath = poster_path\n    ? `https://image.tmdb.org/t/p/w500/${poster_path}`\n    : 'https://via.placeholder.com/200x300';\n\n  return {\n    id: movieId,\n    title,\n    posterPath,\n    releaseYear: release_date.substr(0, 4),\n    voteAverage: `${(vote_average * 10).toFixed(0)}%`,\n    overview,\n    genres: genres.length\n      ? genres.map(item => item.name).join(', ')\n      : 'Oops!! Unknown genres.',\n  };\n};\n\nexport const getMovieCast = async movieId => {\n  const path = `/movie/${movieId}/credits`;\n  const { data } = await instance.get(path);\n  const cast = data.cast.map(({ name, character, id, profile_path }) => {\n    const src = profile_path\n      ? `https://image.tmdb.org/t/p/w500/${profile_path}`\n      : 'https://via.placeholder.com/200x300';\n    return {\n      name,\n      character,\n      id,\n      src,\n    };\n  });\n  return cast;\n};\n\nexport const getMovieReviews = async movieId => {\n  const path = `/movie/${movieId}/reviews`;\n  const { data } = await instance.get(path);\n  const reviews = data.results.map(({ author, id, content }) => ({\n    author,\n    id,\n    content,\n  }));\n\n  return reviews;\n};\n"],"names":["data","location","useLocation","className","css","map","id","movieTitle","src","to","state","from","alt","Searchbar","onSubmit","useState","query","setQuery","useSearchParams","searchParams","useEffect","searchValue","get","event","preventDefault","type","onChange","target","value","name","autoComplete","autoFocus","placeholder","required","memo","movies","setMovies","loading","setLoading","setSearchParams","getMovieByName","then","catch","Notify","finally","inputValue","elements","search","trim","toLowerCase","Loader","MoviesList","length","instance","axios","baseURL","params","api_key","language","include_adult","page","headers","accept","getTrendingMovies","moviesList","results","title","poster_path","substring","getMovieInfoById","movieId","path","genres","release_date","vote_average","overview","posterPath","releaseYear","substr","voteAverage","toFixed","item","join","getMovieCast","cast","character","profile_path","getMovieReviews","reviews","author","content"],"sourceRoot":""}