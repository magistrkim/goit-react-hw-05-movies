{"version":3,"file":"static/js/337.b2072080.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/Reviews/ReviewsItem/reviews-item.module.css?bae1","components/Reviews/ReviewsItem/ReviewsItem.jsx","webpack://react-homework-template/./src/components/Reviews/ReviewsList/reviews-list.module.css?e434","components/Reviews/ReviewsList/ReviewsList.jsx","pages/ReviewsPage/ReviewsPage.jsx","shared/movies-api.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"item\":\"reviews-item_item__4Oso6\",\"title\":\"reviews-item_title__n8TuR\",\"text\":\"reviews-item_text__f0BJh\",\"expandLink\":\"reviews-item_expandLink__LwJsb\",\"description\":\"reviews-item_description__KV87W\"};","import PropTypes from 'prop-types';\nimport { useState } from 'react';\n\nimport css from './reviews-item.module.css';\n\nconst ReviewsItem = ({ data: { author, content } }) => {\n  const [expandedOverview, setExpandedOverview] = useState(false);\n\n  const toggleOverview = () => {\n    setExpandedOverview(!expandedOverview);\n  };\n\n  return (\n    <li className={css.item}>\n      <p className={css.title}>\n        Author: <span className={css.span}>{author}</span>\n      </p>\n      {content.length > 300 ? (\n        <p className={css.text}>\n          {expandedOverview ? content : `${content.substring(0, 300)}...`}\n          <span className={css.expandLink} onClick={toggleOverview}>\n            {expandedOverview ? 'See less' : 'See more'}\n          </span>\n        </p>\n      ) : (\n        <p className={css.text}>{content}</p>\n      )}\n    </li>\n  );\n};\n\nexport default ReviewsItem;\n\nReviewsItem.propTypes = {\n  data: PropTypes.shape({\n    author: PropTypes.string.isRequired,\n    content: PropTypes.string.isRequired,\n  }),\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"reviews-list_list__K+XdN\"};","import PropTypes from 'prop-types';\nimport ReviewsItem from '../ReviewsItem/ReviewsItem';\nimport css from './reviews-list.module.css';\n\nconst ReviewList = ({ data }) => {\n  return (\n    <ul className={css.list}>\n      {data.map(item => (\n        <ReviewsItem key={item.id} data={item} />\n      ))}\n    </ul>\n  );\n};\n\nexport default ReviewList;\n\nReviewList.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n    }).isRequired\n  ),\n};\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport { getMovieReviews } from 'shared/movies-api';\nimport Loader from 'components/Loader/Loader';\nimport ReviewList from 'components/Reviews/ReviewsList/ReviewsList';\nimport css from '../../components/Reviews/ReviewsItem/reviews-item.module.css';\n\nconst ReviewsPage = () => {\n  const [reviews, setReviews] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    setLoading(true);\n    getMovieReviews(movieId)\n      .then(data => setReviews(data))\n      .catch(() =>\n        Notify.warning('Oops! Something went wrong, please try again later.')\n      )\n      .finally(() => setLoading(false));\n  }, [movieId]);\n\n  return (\n    <>\n      {loading && <Loader />}\n      {reviews?.length === 0 && (\n        <p className={css.description}>\n          There is no information about this movie.\n        </p>\n      )}\n      {reviews && <ReviewList data={reviews} />}\n    </>\n  );\n};\n\nexport default ReviewsPage;\n","import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  params: {\n    api_key: '248116f5568d54feca6593c74cdd2b90',\n    language: 'en-US',\n    include_adult: false,\n    page: 1,\n  },\n  headers: {\n    accept: 'application/json',\n  },\n});\n\nexport const getTrendingMovies = async () => {\n  const path = '/trending/movie/day';\n  const { data } = await instance.get(path);\n\n  const moviesList = data.results.map(({ id, title, poster_path }) => {\n    const movieTitle =\n      title.length > 25 ? `${title.substring(0, 22)}...` : title;\n    const src = poster_path\n      ? `https://image.tmdb.org/t/p/w500/${poster_path}`\n      : 'https://via.placeholder.com/200x300.png?text=No+Image';\n\n    return { id, movieTitle, src };\n  });\n\n  return moviesList;\n};\n\nexport const getMovieByName = async query => {\n  const path = '/search/movie';\n  const { data } = await instance.get(path, {\n    params: { query: query },\n  });\n  const moviesList = data.results.map(({ id, name, title, poster_path }) => {\n    let movieTitle = title || name;\n    if (movieTitle.length > 25) {\n      movieTitle = movieTitle.substring(0, 22) + '...';\n    }\n    let src = poster_path\n      ? `https://image.tmdb.org/t/p/w500/${poster_path}`\n      : 'https://via.placeholder.com/200x300.png?text=No+Image';\n    return { id, movieTitle, src };\n  });\n  return moviesList;\n};\n\nexport const getMovieInfoById = async movieId => {\n  const path = `/movie/${movieId}`;\n  const { data } = await instance.get(path);\n\n  const { genres, title, poster_path, release_date, vote_average, overview } =\n    data;\n\n  const posterPath = poster_path\n    ? `https://image.tmdb.org/t/p/w500/${poster_path}`\n    : 'https://via.placeholder.com/200x300';\n\n  return {\n    id: movieId,\n    title,\n    posterPath,\n    releaseYear: release_date.substr(0, 4),\n    voteAverage: `${(vote_average * 10).toFixed(0)}%`,\n    overview,\n    genres: genres.length\n      ? genres.map(item => item.name).join(', ')\n      : 'Oops!! Unknown genres.',\n  };\n};\n\nexport const getMovieCast = async movieId => {\n  const path = `/movie/${movieId}/credits`;\n  const { data } = await instance.get(path);\n  const cast = data.cast.map(({ name, character, id, profile_path }) => {\n    const src = profile_path\n      ? `https://image.tmdb.org/t/p/w500/${profile_path}`\n      : 'https://via.placeholder.com/200x300';\n    return {\n      name,\n      character,\n      id,\n      src,\n    };\n  });\n  return cast;\n};\n\nexport const getMovieReviews = async movieId => {\n  const path = `/movie/${movieId}/reviews`;\n  const { data } = await instance.get(path);\n  const reviews = data.results.map(({ author, id, content }) => ({\n    author,\n    id,\n    content,\n  }));\n\n  return reviews;\n};\n"],"names":["data","author","content","useState","expandedOverview","setExpandedOverview","className","css","length","substring","onClick","map","item","id","reviews","setReviews","loading","setLoading","movieId","useParams","useEffect","getMovieReviews","then","catch","Notify","finally","Loader","instance","axios","baseURL","params","api_key","language","include_adult","page","headers","accept","getTrendingMovies","get","moviesList","results","title","poster_path","movieTitle","src","getMovieByName","query","name","getMovieInfoById","path","genres","release_date","vote_average","overview","posterPath","releaseYear","substr","voteAverage","toFixed","join","getMovieCast","cast","character","profile_path"],"sourceRoot":""}